generator client {
  provider = "prisma-client-js"
  output   = "./generate/client/mes"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./generate/dbml"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "./generate/schemas"
  prismaClientPath = "../../generate/client/mes"
  useMultipleFiles = false
  writeBarrelFiles = false
  createInputTypes = false
  createModelTypes = true

  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = false
  coerceDate                       = true
  writeNullishInModelTypes         = false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BI_TYPE {
  B
  I
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model batch {
  id_batch             Int                 @id @default(autoincrement()) @db.UnsignedInt
  id_order             Int                 @db.UnsignedInt
  batch_key            String              @unique(map: "batch_key_UNIQUE") @db.VarChar(45)
  batch_size           Int                 @db.UnsignedInt
  id_wc_last           String?             @db.VarChar(16)
  batch_wc_enter       DateTime?           @db.DateTime(0)
  batch_product_itmref String?             @db.VarChar(90)
  batch_product_qty    Int?                @db.UnsignedInt
  batch_created        DateTime?           @db.DateTime(0)
  batch_comment        String?             @db.Text
  batch_state_num      Int?                @default(0)
  batch_lot            String?             @db.VarChar(45)
  work_center          work_center?        @relation(fields: [id_wc_last], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_batch_work_center_wc1")
  work_order           work_order          @relation(fields: [id_order], references: [id_order], onDelete: NoAction, onUpdate: NoAction, map: "fk_batch_work_order1")
  concession_assign    concession_assign[]
  work_center_stay     work_center_stay[]

  @@index([id_order], map: "fk_batch_id_order_idx")
  @@index([id_wc_last], map: "fk_batch_id_wc_idx")
}

model build_instruction {
  id_bi       Int          @id @default(autoincrement()) @db.UnsignedInt
  id_wc       String?      @db.VarChar(16)
  bi_pn       String?      @db.VarChar(45)
  bi_type     BI_TYPE      @default(B)
  bi_text     String       @db.MediumText
  work_center work_center? @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_build_instruction_work_center1")

  @@index([id_wc], map: "fk_build_instruction_id_wc_idx")
}

model concession_assign {
  id_concession_assign Int             @id @default(autoincrement()) @db.UnsignedInt
  id_concession        Int             @db.UnsignedInt
  id_batch             Int             @db.UnsignedInt
  id_user              Int             @db.UnsignedInt
  concession_date      DateTime        @default(now()) @db.DateTime(0)
  batch                batch           @relation(fields: [id_batch], references: [id_batch], onDelete: NoAction, onUpdate: NoAction, map: "fk_concession_assign_batch_batch1")
  concession_enum      concession_enum @relation(fields: [id_concession], references: [id_concession], onDelete: NoAction, onUpdate: NoAction, map: "fk_concession_assign_batch_concession_enum1")
  user_user            user_user       @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_concession_assign_batch_user_user1")

  @@index([id_batch], map: "fk_concession_assign_id_batch_idx")
  @@index([id_concession], map: "fk_concession_assign_id_concession_idx")
  @@index([id_user], map: "fk_concession_assign_id_user_idx")
}

model concession_enum {
  id_concession       Int                 @id @default(autoincrement()) @db.UnsignedInt
  concession_name     String              @unique(map: "concession_name_UNIQUE") @db.VarChar(45)
  concession_desc     String              @db.Text
  concession_created  DateTime            @default(now()) @db.DateTime(0)
  concession_closed   DateTime?           @db.DateTime(0)
  concession_disabled Boolean?
  concession_assign   concession_assign[]
}

model custom_field {
  id_field              Int                     @id @default(autoincrement()) @db.UnsignedInt
  id_wc                 String?                 @db.VarChar(16)
  field_name            String                  @db.VarChar(45)
  field_desc            String                  @db.VarChar(500)
  field_datatype        String                  @default("text") @db.VarChar(10)
  field_order           Int?                    @db.UnsignedInt
  work_center           work_center?            @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_custom_field_work_center1")
  custom_field_instance custom_field_instance[]

  @@unique([field_name, id_wc], map: "field_name_UNIQUE")
  @@index([id_wc], map: "fk_custom_field_id_wc_idx")
}

model custom_field_instance {
  id_field_instance Int          @id @default(autoincrement()) @db.UnsignedInt
  id_field          Int          @db.UnsignedInt
  id_order          Int          @db.UnsignedInt
  field_value       String?      @db.VarChar(500)
  custom_field      custom_field @relation(fields: [id_field], references: [id_field], onDelete: NoAction, onUpdate: NoAction, map: "fk_custom_field_instance_custom_field1")
  work_order        work_order   @relation(fields: [id_order], references: [id_order], onDelete: NoAction, onUpdate: NoAction, map: "fk_custom_field_instance_work_order1")

  @@index([id_field], map: "fk_custom_field_instance_id_field_idx")
  @@index([id_order], map: "fk_custom_field_instance_id_order_idx")
}

model device {
  id_device   Int          @id @default(autoincrement()) @db.UnsignedInt
  id_wc       String?      @db.VarChar(16)
  device_key  String?      @unique(map: "device_key_UNIQUE") @db.VarChar(45)
  device_name String       @db.VarChar(60)
  device_desc String       @db.Text
  work_center work_center? @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_device_work_center_wc1")

  @@index([id_wc], map: "fk_device_id_wc_idx")
}

model entry_assign {
  id_entry_assign        Int              @id @default(autoincrement()) @db.UnsignedInt
  id_wc                  String           @db.VarChar(16)
  id_entry               Int              @db.UnsignedInt
  entry_assign_order     Int?             @db.UnsignedInt
  entry_assign_mandatory Boolean          @default(false)
  entry_enum             entry_enum       @relation(fields: [id_entry], references: [id_entry], onDelete: NoAction, onUpdate: NoAction, map: "fk_error_assign_error_enum1")
  work_center            work_center      @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_error_assign_work_center_wc1")
  entry_instance         entry_instance[]

  @@index([id_entry], map: "fk_entry_assign_id_entry_idx")
  @@index([id_wc], map: "fk_entry_assign_id_wc_idx")
}

model entry_enum {
  id_entry       Int            @id @default(autoincrement()) @db.UnsignedInt
  entry_name     String         @db.VarChar(45)
  entry_key      String?        @db.VarChar(45)
  entry_desc     String         @db.VarChar(500)
  entry_is_error Boolean        @default(false)
  entry_datatype String         @default("text") @db.VarChar(10)
  entry_color    String?        @db.VarChar(45)
  entry_icon     String?        @db.VarChar(45)
  entry_assign   entry_assign[]
}

model entry_instance {
  id_entry_inst    Int              @id @default(autoincrement()) @db.UnsignedInt
  id_entry_assign  Int              @db.UnsignedInt
  id_wc_stay       Int              @db.UnsignedInt
  id_user          Int              @db.UnsignedInt
  entry_value      String?          @db.VarChar(60)
  entry_modified   DateTime?        @db.DateTime(0)
  entry_inactive   Boolean          @default(false)
  entry_finalized  Boolean          @default(false)
  entry_assign     entry_assign     @relation(fields: [id_entry_assign], references: [id_entry_assign], onDelete: NoAction, onUpdate: NoAction, map: "fk_entry_instance_entry_assign1")
  user_user        user_user        @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_entry_instance_id_user")
  work_center_stay work_center_stay @relation(fields: [id_wc_stay], references: [id_wc_stay], onDelete: NoAction, onUpdate: NoAction, map: "fk_entry_instance_work_center_stay1")

  @@index([id_entry_assign], map: "fk_entry_instance_id_entry_assign_idx")
  @@index([id_user], map: "fk_entry_instance_id_user_idx")
  @@index([id_wc_stay], map: "fk_entry_instance_id_wc_stay_idx")
}

model operation {
  id_operation Int         @id @default(autoincrement())
  id_wc        String      @db.VarChar(16)
  id_order     Int         @db.UnsignedInt
  oper_time    Float       @default(0) @db.Float
  oper_name    String?     @db.VarChar(60)
  oper_seq     Int         @db.UnsignedInt
  work_center  work_center @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_operation_work_center1")
  work_order   work_order  @relation(fields: [id_order], references: [id_order], onDelete: NoAction, onUpdate: NoAction, map: "fk_operation_work_order1")

  @@index([id_order], map: "fk_operation_id_order_idx")
  @@index([id_wc], map: "fk_operation_id_wc_idx")
}

model permission_assign {
  id_permission_assign Int             @id @default(autoincrement()) @db.UnsignedInt
  id_role              Int             @db.UnsignedInt
  id_permission        Int             @db.UnsignedInt
  user_permission      user_permission @relation(fields: [id_permission], references: [id_permission], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission_assign_user_permission1")
  user_role            user_role       @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission_assign_user_role1")

  @@index([id_permission], map: "fk_permission_assign_id_permission_idx")
  @@index([id_role], map: "fk_permission_assign_id_role_idx")
}

model role_assign {
  id_role_assign Int       @id @default(autoincrement()) @db.UnsignedInt
  id_user        Int       @db.UnsignedInt
  id_role        Int       @db.UnsignedInt
  user_role      user_role @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role_assign_user_role1")
  user_user      user_user @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role_assign_user_user")

  @@index([id_role], map: "fk_role_assign_id_role_idx")
  @@index([id_user], map: "fk_role_assign_id_user_idx")
}

model time_tracker {
  id_time          Int              @id @default(autoincrement()) @db.UnsignedInt
  id_wc_stay       Int              @db.UnsignedInt
  id_user          Int?             @db.UnsignedInt
  time_start       DateTime?        @db.DateTime(0)
  time_stop        DateTime?        @db.DateTime(0)
  time_interval    Int?             @db.UnsignedInt
  time_type        Int              @default(0) @db.UnsignedInt
  user_user        user_user?       @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_time_tracker_user_user1")
  work_center_stay work_center_stay @relation(fields: [id_wc_stay], references: [id_wc_stay], onDelete: NoAction, onUpdate: NoAction, map: "fk_time_tracker_work_center_stay1")

  @@index([id_user], map: "fk_time_tracker_id_user_idx")
  @@index([id_wc_stay], map: "fk_time_tracker_id_wc_stay_idx")
}

model user_permission {
  id_permission     Int                 @id @default(autoincrement()) @db.UnsignedInt
  permission_name   String              @unique(map: "permission_name_UNIQUE") @db.VarChar(45)
  permission_desc   String              @default("") @db.Text
  permission_assign permission_assign[]
}

model user_role {
  id_role           Int                 @id @default(autoincrement()) @db.UnsignedInt
  role_name         String              @unique(map: "role_name_UNIQUE") @db.VarChar(45)
  role_desc         String              @db.Text
  permission_assign permission_assign[]
  role_assign       role_assign[]
}

model user_user {
  id_user           Int                 @id @default(autoincrement()) @db.UnsignedInt
  user_firstname    String              @db.VarChar(60)
  user_lastname     String              @db.VarChar(100)
  user_login        String?             @unique(map: "user_login_UNIQUE") @db.VarChar(60)
  user_ldap         Boolean             @default(false)
  user_pass         String?             @db.VarChar(64)
  user_operator     String?             @unique(map: "user_operator_UNIQUE") @db.VarChar(45)
  user_inactive     Boolean             @default(false)
  user_token        String?             @db.VarChar(500)
  concession_assign concession_assign[]
  entry_instance    entry_instance[]
  role_assign       role_assign[]
  time_tracker      time_tracker[]
  work_center_stay  work_center_stay[]
}

model work_center {
  id_wc             String              @id @unique(map: "wc_key_UNIQUE") @db.VarChar(16)
  wc_desc           String              @db.Text
  wc_week_hours     Float               @default(0) @db.Float
  wc_idle_timeout   Int                 @default(0) @db.UnsignedInt
  batch             batch[]
  build_instruction build_instruction[]
  custom_field      custom_field[]
  device            device[]
  entry_assign      entry_assign[]
  operation         operation[]
  work_center_stay  work_center_stay[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model work_center_stay {
  id_wc_stay              Int              @id @default(autoincrement()) @db.UnsignedInt
  id_wc                   String           @db.VarChar(16)
  id_batch                Int              @db.UnsignedInt
  id_user                 Int?             @db.UnsignedInt
  wc_start_date           DateTime         @default(now()) @db.DateTime(0)
  wc_end_date             DateTime?        @db.DateTime(0)
  wc_stay_order           Int              @default(1) @db.UnsignedInt
  wc_stay_last_stay_on_wc Boolean?         @default(false)
  wc_stay_finish_qty      Int              @default(0)
  entry_instance          entry_instance[]
  time_tracker            time_tracker[]
  batch                   batch            @relation(fields: [id_batch], references: [id_batch], onDelete: NoAction, onUpdate: NoAction, map: "fk_oper_finalized_batch1")
  work_center             work_center      @relation(fields: [id_wc], references: [id_wc], onDelete: NoAction, onUpdate: NoAction, map: "fk_oper_finalized_work_center1")
  user_user               user_user?       @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_work_center_stay_user_user1")

  @@index([id_batch], map: "fk_wc_stay_id_batch_idx")
  @@index([id_user], map: "fk_wc_stay_id_user_idx")
  @@index([id_wc], map: "fk_wc_stay_id_wc_idx")
}

model work_order {
  id_order              Int                     @id @default(autoincrement()) @db.UnsignedInt
  wo_number             String                  @unique(map: "wo_number_UNIQUE") @db.VarChar(45)
  wo_startdate          String?                 @db.VarChar(100)
  wo_enddate            String?                 @db.VarChar(100)
  wo_product            String?                 @db.VarChar(90)
  wo_quantity           Int?
  wo_status             Int?
  wo_x3_last_update     DateTime?               @db.DateTime(0)
  wo_comment            String?                 @db.Text
  wo_note_short         String?                 @db.VarChar(260)
  wo_note_long          String?                 @db.Text
  wo_hold               Boolean                 @default(false)
  wo_keep_ope_seq       Boolean                 @default(false)
  wo_customer           String?                 @db.VarChar(100)
  batch                 batch[]
  custom_field_instance custom_field_instance[]
  operation             operation[]
}
